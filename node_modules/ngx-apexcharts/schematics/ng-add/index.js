"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectFromWorkspace = void 0;
const tasks_1 = require("@angular-devkit/schematics/tasks");
const ng_ast_utils_1 = require("@schematics/angular/utility/ng-ast-utils");
const workspace_1 = require("@schematics/angular/utility/workspace");
const schematics_1 = require("@angular-devkit/schematics");
const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
const workspace_models_1 = require("@schematics/angular/utility/workspace-models");
const change_1 = require("@schematics/angular/utility/change");
const ts = require("@schematics/angular/third_party/github.com/Microsoft/TypeScript/lib/typescript");
function default_1(options) {
    return (_host, _context) => __awaiter(this, void 0, void 0, function* () {
        const workspace = yield (0, workspace_1.getWorkspace)(_host);
        const project = getProjectFromWorkspace(workspace, options.project);
        if (!project) {
            throw new Error(`can not find ${options.project} angular project`);
        }
        if (project.extensions.projectType === workspace_models_1.ProjectType.Application) {
            addNgxApexchartsModule(project, _host);
            // addRootImport(options.project,({ code, external}) => {
            //   return code`${external('NgxApexchartsModule', 'ngx-apexcharts')}`
            // });
        }
        // addPackageToPackageJson(_host, 'ngx-apexcharts', '~0.3.0');
        addPackageToPackageJson(_host, 'apexcharts', '~3.44.0');
        _context.logger.log('info', '✅️ Added "ngx-apexcharts"');
        _context.addTask(new tasks_1.NodePackageInstallTask());
    });
}
exports.default = default_1;
function addNgxApexchartsModule(project, _host) {
    if (!project) {
        return;
    }
    const appModulePath = (0, ng_ast_utils_1.getAppModulePath)(_host, getProjectMainFile(project));
    const sourceFile = readIntoSourceFile(_host, appModulePath);
    const importPath = 'ngx-apexcharts';
    const recorder = _host.beginUpdate(appModulePath);
    const moduleName = 'NgxApexchartsModule';
    const importChange = (0, ast_utils_1.insertImport)(sourceFile, appModulePath, moduleName, importPath);
    if (importChange instanceof change_1.InsertChange) {
        recorder.insertLeft(importChange.pos, importChange.toAdd);
    }
    const ngModuleName = 'NgxApexchartsModule';
    const ngModuleChanges = (0, ast_utils_1.addSymbolToNgModuleMetadata)(sourceFile, appModulePath, 'imports', ngModuleName, null);
    for (const change of ngModuleChanges) {
        if (change instanceof change_1.InsertChange) {
            recorder.insertLeft(change.pos, change.toAdd);
        }
    }
    _host.commitUpdate(recorder);
}
function readIntoSourceFile(host, modulePath) {
    const text = host.read(modulePath);
    if (text === null) {
        throw new schematics_1.SchematicsException(`File ${modulePath} does noot exist`);
    }
    const sourceText = text.toString('utf-8');
    return ts.createSourceFile(modulePath, sourceText, ts.ScriptTarget.Latest, true);
}
function addPackageToPackageJson(host, pkg, version) {
    if (host.exists('package.json')) {
        const sourceText = host.read('package.json').toString('utf-8');
        const json = JSON.parse(sourceText);
        if (!json.dependencies) {
            json.dependencies = {};
        }
        if (!json.dependencies[pkg]) {
            json.dependencies[pkg] = version;
            json.dependencies = sortObjectByKeys(json.dependencies);
        }
        host.overwrite('package.json', JSON.stringify(json, null, 2));
    }
    return host;
}
function sortObjectByKeys(obj) {
    return Object.keys(obj)
        .sort()
        .reduce((result, key) => (result[key] = obj[key]) && result, {});
}
// eslint-disable-next-line
function getProjectTargetOptions(project, buildTarget) {
    var _a, _b;
    if ((_b = (_a = project === null || project === void 0 ? void 0 : project.targets) === null || _a === void 0 ? void 0 : _a.get(buildTarget)) === null || _b === void 0 ? void 0 : _b.options) {
        return project.targets.get(buildTarget).options;
    }
    throw new Error(`Cannot determine project target configuration for: ${buildTarget}.`);
}
function getProjectMainFile(project) {
    const buildOptions = getProjectTargetOptions(project, 'build');
    if (!buildOptions) {
        throw new schematics_1.SchematicsException(`Could not find the project main file inside of the ` +
            `workspace config (${project.sourceRoot})`);
    }
    // `browser` is for the `@angular-devkit/build-angular:application` builder while
    // `main` is for the `@angular-devkit/build-angular:browser` builder.
    const mainPath = (buildOptions['browser'] || buildOptions['main']);
    if (!mainPath) {
        throw new schematics_1.SchematicsException(`Could not find the project main file inside of the ` +
            `workspace config (${project.sourceRoot})`);
    }
    return mainPath;
}
function getProjectFromWorkspace(workspace, projectName) {
    if (!projectName) {
        // TODO(crisbeto): some schematics APIs have the project name as optional so for now it's
        // simpler to allow undefined and checking it at runtime. Eventually we should clean this up.
        throw new schematics_1.SchematicsException('Project name is required.');
    }
    const project = workspace.projects.get(projectName);
    if (!project) {
        throw new schematics_1.SchematicsException(`Could not find project in workspace: ${projectName}`);
    }
    return project;
}
exports.getProjectFromWorkspace = getProjectFromWorkspace;
//# sourceMappingURL=index.js.map